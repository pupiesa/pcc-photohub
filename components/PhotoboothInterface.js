// components/PhotoboothInterface.js
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { client } from "@/lib/photoboothClient";
import { Card, CardContent, CardDescription, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const CAMERA_BASE = (process.env.NEXT_PUBLIC_CAMERA_BASE || "").replace(/\/$/, "") || null;
const MAX_PHOTOS = 2;

export default function PhotoboothInterface({ user, onLogout }) {
  const router = useRouter();

  const [countdown, setCountdown] = useState(null);
  const [photosTaken, setPhotosTaken] = useState(0);
  const [capturedImage, setCapturedImage] = useState(null);          // URL ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å Pi
  const [capturedServerPath, setCapturedServerPath] = useState(null); // path ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô Pi
  const [sessionPaths, setSessionPaths] = useState([]);              // ‡πÄ‡∏Å‡πá‡∏ö serverPath ‡∏ó‡∏µ‡∏•‡∏∞‡πÉ‡∏ö
  const [busy, setBusy] = useState(false);

  const [liveSrc, setLiveSrc] = useState(null); // null (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô "")
  const liveImgRef = useRef(null);

  // ---------- Live preview ----------
  useEffect(() => {
    if (!CAMERA_BASE) return;
    const ts = Date.now();
    setLiveSrc(`${CAMERA_BASE}/video_feed?ts=${ts}`);
    return () => {
      if (liveImgRef.current) liveImgRef.current.removeAttribute("src");
      setLiveSrc(null);
    };
  }, []);

  const startPhotoshoot = () => {
    let count = 3;
    setCountdown(count);
    const timer = setInterval(() => {
      count--;
      if (count > 0) setCountdown(count);
      else {
        setCountdown("üì∏");
        setTimeout(() => { setCountdown(null); handleCapture(); }, 500);
        clearInterval(timer);
      }
    }, 1000);
  };

  // ---------- Capture ----------
  const handleCapture = async () => {
    try {
      if (!CAMERA_BASE) throw new Error("CAMERA_BASE not set");
      const res = await fetch(`${CAMERA_BASE}/capture`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      });
      if (!res.ok) throw new Error((await res.text()) || `Capture failed: ${res.status}`);
      const data = await res.json(); // { ok?, url, serverPath }
      const url = data?.url;
      if (!url) throw new Error("No image url returned from /capture");
      setCapturedImage(`${CAMERA_BASE}${url}?ts=${Date.now()}`);
      setCapturedServerPath(data?.serverPath || null);
    } catch (err) {
      console.error(err);
      alert("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  // ---------- Confirm & Flow ----------
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ‡πÄ‡∏ö‡∏≠‡∏£‡πå_YYYYMMDD_‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πàN.<ext>  (‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏≤ ext ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ .jpg)
  const buildTargetName = (number, index, localPath) => {
    const d = new Date();
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    const dateStr = `${yyyy}${mm}${dd}`;

    let ext = ".jpg";
    if (typeof localPath === "string") {
      const m = localPath.match(/\.[A-Za-z0-9]+$/);
      if (m) ext = m[0].toLowerCase();
    }
    return `${number}_${dateStr}_‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà${index}${ext}`;
  };

  // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (serverPath) ‚Üí Nextcloud + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB ‚Üí ‡πÑ‡∏õ /dashboard
  const uploadBatchAndGo = async (paths) => {
    const number = user?.phone || user?.number;
    if (!number) throw new Error("missing user number");
    if (!paths.length) return;

    const remotes = [];
    // ‡πÉ‡∏ö‡πÅ‡∏£‡∏Å: upload-and-share (‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏£‡∏µ‡πÉ‡∏ä‡πâ public link) + ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const firstPath = paths[0];
    const t1 = buildTargetName(number, 1, firstPath);
    const up1 = await client.uploadAndShare({
      folderName: number,
      filePath: firstPath,
      targetName: t1,
      // note/linkPassword/expiration ‡πÉ‡∏™‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    });
    if (up1?.share?.url) await client.setNextcloudLink(number, up1.share.url);
    if (up1?.uploaded?.remotePath) remotes.push(up1.uploaded.remotePath);

    // ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: upload-only + ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    for (let i = 1; i < paths.length; i++) {
      const p = paths[i];
      const targetName = buildTargetName(number, i + 1, p);
      const r = await client.uploadOnly({ folderName: number, filePath: p, targetName });
      if (r?.uploaded?.remotePath) remotes.push(r.uploaded.remotePath);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å remotePath ‡∏•‡∏á DB (file_address)
    if (remotes.length) {
      await client.appendFileAddress(number, remotes);
    }

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
    router.push("/dashboard");
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏π‡∏õ
  const handleConfirmCapture = async () => {
    try {
      setBusy(true);

      // ‡πÄ‡∏Å‡πá‡∏ö path ‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏∏‡∏î
      const arr = capturedServerPath ? [...sessionPaths, capturedServerPath] : [...sessionPaths];
      setSessionPaths(arr);

      // ‡πÅ‡∏à‡πâ‡∏á Pi ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ live (‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå state)
      if (!CAMERA_BASE) throw new Error("CAMERA_BASE not set");
      const res = await fetch(`${CAMERA_BASE}/confirm`, { method: "POST" });
      if (!res.ok) throw new Error((await res.text()) || `Confirm failed: ${res.status}`);
      const data = await res.json();

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå preview ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      setCapturedImage(null);
      setCapturedServerPath(null);

      const nextCount = photosTaken + 1;
      setPhotosTaken(nextCount);

      // ‡∏ñ‡πâ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö 2 ‡πÉ‡∏ö ‚Üí ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡πÑ‡∏õ /dashboard
      if (nextCount >= MAX_PHOTOS) {
        await uploadBatchAndGo(arr);
        return; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ live ‡πÅ‡∏•‡πâ‡∏ß
      }

      // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ live ‡∏ï‡πà‡∏≠
      const nextLive = data?.video ? `${CAMERA_BASE}${data.video}` : `${CAMERA_BASE}/video_feed?ts=${Date.now()}`;
      setLiveSrc(nextLive);
    } catch (err) {
      console.error(err);
      alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setBusy(false);
    }
  };

  const handleRetake = async () => {
    try {
      if (CAMERA_BASE) {
        await fetch(`${CAMERA_BASE}/return_live`, { method: "POST" }).catch(() => {});
        setLiveSrc(`${CAMERA_BASE}/video_feed?ts=${Date.now()}`);
      }
    } catch {}
    setCapturedImage(null);
    setCapturedServerPath(null);
    setCountdown(null);
  };

  const resetSession = () => {
    setPhotosTaken(0);
    setCountdown(null);
    setCapturedImage(null);
    setCapturedServerPath(null);
    setSessionPaths([]);
    if (CAMERA_BASE) setLiveSrc(`${CAMERA_BASE}/video_feed?ts=${Date.now()}`);
  };

  return (
    <Card className="w-96 h-[600px]">
      <CardContent className="flex flex-col gap-4 p-6 h-full">
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl">Welcome!</CardTitle>
          <Button variant="outline" onClick={onLogout} className="text-sm" disabled={busy}>
            Logout
          </Button>
        </div>

        <CardDescription>Phone: {user?.phone || user?.number || "-"}</CardDescription>

        <div className="flex-1 flex flex-col justify-center items-center gap-6">
          {/* Preview */}
          <div className="w-full h-64 bg-black rounded-lg overflow-hidden relative">
            {!capturedImage ? (
              liveSrc ? (
                <img
                  ref={liveImgRef}
                  src={liveSrc ?? undefined}  // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô null/undefined ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ""
                  alt="Live preview"
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full grid place-items-center text-white/70 text-sm p-4 text-center">
                  {CAMERA_BASE
                    ? "Starting live preview‚Ä¶"
                    : "Camera base URL not set. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NEXT_PUBLIC_CAMERA_BASE ‡πÉ‡∏ô .env ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó"}
                </div>
              )
            ) : (
              <img
                src={capturedImage}
                alt="Captured"
                className="w-full h-full object-cover"
              />
            )}
          </div>

          {capturedImage ? (
            <div className="w-full space-y-3">
              <Button
                onClick={handleConfirmCapture}
                className="w-full h-12 text-xl font-bold"
                disabled={busy}
              >
                {busy ? "Processing‚Ä¶" : "Confirm Image"}
              </Button>
              <Button
                variant="outline"
                onClick={handleRetake}
                className="w-full h-12"
                disabled={busy}
              >
                Retake Photo
              </Button>
            </div>
          ) : countdown ? (
            <div className="text-8xl font-bold text-center">{countdown}</div>
          ) : (
            <>
              <div className="text-center">
                <div className="text-6xl mb-4">üì∑</div>
                <div className="text-xl font-semibold">
                  Photos taken: {photosTaken}/{MAX_PHOTOS}
                </div>
              </div>

              <div className="w-full space-y-3">
                {photosTaken < MAX_PHOTOS ? (
                  <Button
                    onClick={startPhotoshoot}
                    className="w-full h-16 text-2xl font-bold"
                    disabled={!CAMERA_BASE || busy}
                  >
                    Take Photo {photosTaken + 1}
                  </Button>
                ) : (
                  <div className="space-y-3">
                    <div className="text-center text-green-600 font-bold text-xl">
                      ‚úÖ Session Complete!
                    </div>
                    <Button
                      onClick={resetSession}
                      className="w-full h-12 text-xl"
                      disabled={busy}
                    >
                      Start New Session
                    </Button>
                  </div>
                )}

                {photosTaken > 0 && photosTaken < MAX_PHOTOS && (
                  <Button
                    variant="outline"
                    onClick={resetSession}
                    className="w-full h-12"
                    disabled={busy}
                  >
                    Reset Session
                  </Button>
                )}
              </div>
            </>
          )}
        </div>

        <div className="text-center text-sm text-gray-500">
          Session: ‡∏ø50 ‚Ä¢ {MAX_PHOTOS} photos included
        </div>
      </CardContent>
    </Card>
  );
}
